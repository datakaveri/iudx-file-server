openapi: 3.0.2

schemes:
  - "http"
  - "https"

produces:
  - "application/json"
  - "text/plain"

consumes:
  - "application/json"
  - "text/plain"

info:
  title: "Data Exchange File Server APIs"
  version: 5.5.0
  description: |
    
    # Introduction
    The File Server is DX(Data Exchange) File store which allows upload, download and discovery of Files.
    For Upload it allows uploading Files with group id or resource item id, it also allow user to attach additional metadata fields to the uploaded file.
    For Discovery it allows temporal queries to search files data within time ranges, geo parameters. It also allows user to list file metadata using resource group id or resourfce item id. 
    
    # Configurations
    - **Server**: 
      - In the doc, we display the server url to be https://example-fs.com with the hostname as example-fs.com
      - This could be configured according to the deployment
    - **Base path**:
      - Base path is the path on which API is served, relative to the host
      - It is the initial part of the API
      - These base path values could be configured according to the deployment
      - The base path for [DX AAA Server](https://github.com/datakaveri/iudx-aaa-server) is set to `/auth/v1`
      - The base path for [DX Catalogue Server](https://github.com/datakaveri/iudx-catalogue-server) is set to `/iudx/cat/v1`
      - Currently, the following APIs have `/ngsi-ld/v1` base path
          -  /temporal/entities
          -  /entities
      - The following APIs have `/iudx/v1` base path
          -  /upload
          -  /download
          -  /list
          -  /delete
      <br>
    - **Request Samples**:
      - The `<tokeValue>` in the header of request sample could be replaced with respective token value [Also refer Tokens section [here](#section/Tokens)]
    
    
    
    # Tokens
    All the <b>upload, download and delete</b> for archival calls to the file server should now contain a valid DX auth token presented in the query header. 
    To upload, download and delete for archival files a consumer must get a token along with the associated constraints from the DX Auth Server.
    
    # Pagination
    File server also offers way to paginate the result for queries. If a query returns large number of records then user can use additional parameters in query parameters to limit numbers of records to be returned.
    
    Pagination is applicable only for `/temporal/entities` API
    
    additional parameters to be used:
      - <b>offset</b> : The from parameter defines the offset from the first result you want to fetch,  ( <i>default : 0</i> ,<i>minValue: 0</i>, <i>maxValue: 49999</i> )
      - <b>limit</b> : The size parameter allows you to configure the maximum results to be returned  ( <i>default: 5000</i> ,<i>minValue: 0</i>, <i>maxValue: 5000</i> )
    
    # API HTTP Responses
    Apart from the response codes specified in each API, the API server may respond with certain 4xx and 5xx error codes which are related to common API Gateway behaviours. The application should address them accordingly.
  

  contact:
    name: For support contact IUDX Team at
    email: support@iudx.org.in
    url: https://iudx.org.in/
  license:
    name: Apache 2.0

tags:
  -  name: Files
     x-displayName: Files
     description: APIs to upload, download and delete Files from file Server

  -  name: Discovery
     x-displayName: Discovery
     description: Search APIs to discover files or metadata.

servers:
  - url: 'https://example-fs.com/iudx/v1'
    description: 'Development Server URL'


paths:
  /upload:
    post:
      tags:
        - Files
      summary: Upload a File
      operationId: upload-document
      description: Allows user to upload documents to DX system, it also allows user to attach additional metadata fields using form-parameters.
      parameters:
        - name: token
          in: header
          description: A valid <b> DX Auth token </b> to process the requests.
          required: true
          schema:
            type: string
            format: string
            maxLength: 512
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
        - name: externalStorage
          in: header
          description: A boolean value to determine whether a file being uploaded is stored externally or is attached in the request body.
          required: false
          schema:
            type: boolean

      x-codeSamples:
        - lang: 'cURL'
          label: 'upload file (request URL + payload) '
          source: |
            curl --location --request POST 'https://example-fs.com/iudx/v1/upload' \
            --header 'token: <tokenValue>' \
            --form 'file=@"/home/user/uploadFile.txt"' \
            --form 'id="80f18fc8-ef83-47e2-a946-d88a3f39eeda"' \
            --form 'isSample="true"'

      requestBody:
        content:
          application/octet-stream:
            schema:
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                  description: valid DX group or resource id
                file:
                  type: string
                  description: file to upload
                  format: binary
                isSample:
                  type: boolean
                  description: a boolean flag indicating whether a sample file is being uploaded or a Archive file is uploaded
                  default: false
                startTime:
                  type: string
                  description: Specifies the start time for the data within the document (`ISO8601`) `*not required for sample file upload`

                endtime:
                  type: string
                  description: Specifies the end time for the data within the document (`ISO8601`) `*not required for sample file upload`
                geometry:
                  type: string
                  enum : [Point (or) point, Polygon (or) polygon, LineString (or) linestring, bbox]
                  description: The geometry type, this should be one from the available options in the Enum list.
                coordinates:
                  type: array
                  minItems: 2
                  maxItems: 10
                  items:
                    type: number
                  description: 'The coordinates for a specific geometry. <br/> This parameter accepts both <b> one dimentional array and multi dimentional arrays </b> based on the <b> geometry</b> type. <br/> For e.g, [longitude-1,latitude-1] should be used for geometry <b>point</b>.  <br/>[[[longitude-1,latitude-1], [longitude-2,latitude-2],...., [longitude-n,latitude-n]]] should be used for geometry <b>polygon</b>. <br/> [[longitude-1,latitude-1], [longitude-2,latitude-2],...., [longitude-n,latitude-n]] should be used for geometry <b>bbox and linestring </b>. <br/> Maximum of 10 latitude, longitude pairs can be used for geometry <b>polygon, bbox and linestring </b>. <br/> Note: The data-type of this field is a string, therefore the coordinates are a string encoded multidimensional array. <br/> Maximum precision allowed is upto 6 decimal places.'
                file-download-url:
                  type: string
                  description: a url to the externally stored file `*not required when a file is attached for upload`
      responses:
        '200':
          description: 'Successfully uploaded a file'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileUploadResponse'
        '400':
          description: 'Bad query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
        '401':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'


  /download:
    get:
      tags:
        - Files
      summary: Download a file
      operationId: download-file
      description: Allows user to download documents from DX system using document id(fileId)
      parameters:
        - name: token
          in: header
          description: A valid <b> DX Auth token </b> to process the requests. token is mandatory to download files.
          required: true
          schema:
            type: string
            format: string
            maxLength: 512
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
        - name: 'file-id'
          in: query
          description: valid DX uploaded file name
          required: true
          schema:
            type: string
            maxLength: 512

      x-codeSamples:
        - lang: 'cURL'
          label: 'download a file'
          source: |
            curl --location --request GET 'https://example-fs.com/iudx/v1/download?file-id=80f18fc8-ef83-47e2-a946-d88a3f39eeda/sample.txt' \
            --header 'token: <tokenValue>'
      

      responses:
        '200':
          description: 'Successfully downloaded a file'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: 'Bad query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
        '401':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'
        '404':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardFileNotFoundErrorResponse"
          description: 'File not found'

  /delete:
    delete:
      tags:
        - Files
      summary: Delete a file
      operationId: delete-file
      description: Allows user to delete documents from DX system using document id(fileId)
      parameters:
        - name: token
          in: header
          description: A valid <b> DX Auth token </b> to process the requests.
          required: true
          schema:
            type: string
            format: string
            maxLength: 512
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
        - name: 'file-id'
          in: query
          description: valid DX uploaded file name
          required: true
          schema:
            type: string
            maxLength: 512

      x-codeSamples:
        - lang: 'cURL'
          label: 'delete file'
          source: |
            curl --location --request DELETE 'https://example-fs.com/iudx/v1/delete?file-id=80f18fc8-ef83-47e2-a946-d88a3f39eeda/dbc537b3-8b52-4651-ae3c-1835528b94fe' \
            --header 'token: <tokenValue>' \
            --header 'externalStorage: true'

      responses:
        '200':
          description: 'Successfully deleted a file'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardDeleteSuccessResponse'
        '400':
          description: 'Bad query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
        '401':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'
        '404':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardFileNotFoundErrorResponse"
          description: 'File not found'

  /temporal/entities:
    get:
      servers:
        - url: 'https://example.com/ngsi-ld/v1'
          description: 'Development Server URL'
      tags:
        - Discovery
      summary: search for files
      operationId: search-file
      parameters:
        - name: id
          in: query
          description: valid DX group or resource id
          required: true
          schema:
            type: string
            format: uuid
        - name: time
          in: query
          description: start time in `ISO8601`
          required: true
          schema:
            type: string
        - name: endtime
          in: query
          description: end time in `ISO8601`
          required: true
          schema:
            type: string
        - name: timerel
          in: query
          description: The temporal relation type of timerel to be performed
          required: true
          schema:
            type: string
            enum: [between]
        - name: geoproperty
          in: query
          description: 'Name of the <b> geospatial </b> property in the <b> DX data descriptor </b>. <br /> The current version of the API <b> mandates </b> it to be equal to `location`'
          schema:
            type: string
            enum: [location]
        - name: georel
          in: query
          description: 'The relation type of <b>geoquery</b> to be performed. <br/> This <b>should</b> be one from the available options in the Enum list. <br/> The relation <b> near </b> should be always accomodated with a <b> maxdistance </b> property. <br/> Apart from <b> maxdistance</b> , all other fields in the Enum list are <b> case sensitive </b> fields. <br/> The relation <b> near;maxdistance </b> is applicable only for a <b> point </b>.  <br/> The relation <b> within </b> and  <b> intersects </b> are applicable only for <b> bbox, polygon and linestring</b>.'
          schema:
            type: string
            enum: [near;maxdistance=<distance_in_meters>, within, intersects]
        - name: geometry
          in: query
          description: 'The geometry type of <b>geoquery</b> to be performed. <br/> This <b>should</b> be one from the available options in the Enum list. <br/>The list is <b>case sensitive</b> '
          schema:
            type: string
            enum: [Point (or) point, Polygon (or) polygon, LineString (or) linestring, bbox]
        - name: coordinates
          in: query
          description: 'The coordinates for a specific geometry query type. <br/> This parameter accepts both <b> one dimentional array and multi dimentional arrays </b> based on the <b> geometry</b> type. <br/> For e.g, [longitude-1,latitude-1] should be used for geometry <b>point</b>.  <br/>[[[longitude-1,latitude-1], [longitude-2,latitude-2],...., [longitude-n,latitude-n]]] should be used for geometry <b>polygon</b>. <br/> [[longitude-1,latitude-1], [longitude-2,latitude-2],...., [longitude-n,latitude-n]] should be used for geometry <b>bbox and linestring </b>. <br/> Maximum of 10 latitude, longitude pairs can be used for geometry <b>polygon, bbox and linestring </b>. <br/> Note: The data-type of this field is a string, therefore the coordinates are a string encoded multidimensional array.<br/> Maximum precision allowed is upto 6 decimal places.'
          schema:
            type: array
            minItems: 2
            maxItems: 10
            items:
              type: number
            format: double

      x-codeSamples:
        - lang: 'cURL'
          label: 'search for a file'
          source: |
            curl --location --request GET 'https://example-fs.com/ngsi-ld/v1/temporal/entities?id=8a728957-1530-43a2-b844-88a593a94608&time=2020-09-10T00:00:00Z&endTime=2020-09-15T00:00:00Z&timerel=between' \
            --header 'token: <tokenValue>'


      responses:
        '200':
          description: 'Query result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardQueryResponse'
        '400':
          description: 'Bad query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
        '401':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'

  /list:
    get:
      tags:
        - Discovery
      summary: list metadata
      operationId: list-metadata
      parameters:
        - name: id
          in: query
          description: valid DX group or resource id
          required: true
          schema:
            type: string
            format: uuid

      x-codeSamples:
        - lang: 'cURL'
          label: 'list metadata'
          source: |
            curl --location --request GET 'https://example-fs.com/iudx/v1/list?id=8a728957-1530-43a2-b844-88a593a94608' \
            --header 'token: <tokenValue>'


      responses:
        '200':
          description: 'Query result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardQueryResponse'
        '400':
          description: 'Bad query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
        '401':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'

components:
  schemas:
    standardBadRequestErrorResponse:
      title: standardBadRequestErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:badRequest
        title: Bad Request Data
        detail: Bad query
    fileUploadResponse:
      title: fileUploadSuccessResponse
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
          items:
            type: object
      example:
        type: urn:dx:rs:success
        title: Success
        results: [{
          "fileId": "80f18fc8-ef83-47e2-a946-d88a3f39eeda/sample.txt"
        }]
    standardInvalidTokenErrorResponse:
      title: standardInvalidTokenErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:invalidAuthorizationToken
        title: Invalid credentials
        detail: Invalid credentials
    standardFileNotFoundErrorResponse:
      title: standardFileNotFoundErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:resourceNotFound
        title: File does not exist
        detail: File does not exist
    standardQueryResponse:
      title: standardBadRequestErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
          items:
            type: object
        limit:
          type: integer
        offset:
          type: integer
        totalHits:
          type: integer
      example:
        type: urn:dx:rs:success
        title: Success
        results: [
          {
            "id": "8a728957-1530-43a2-b844-88a593a94608",
            "timeRange": {
              "gte": "2020-09-05T00:00:00Z",
              "lte": "2020-09-15T00:00:00Z"
            },
            "fileId": "8a728957-1530-43a2-b844-88a593a94608/0cb04afb-32f5-44dd-982d-323b5900bcca.txt",
            "location": {
              "type": "point",
              "coordinates": [
                72.81,
                21.16
              ]
            }
          }
        ]
        "limit": 5000,
        "offset": 0,
        "totalHits": 1
    standardDeleteSuccessResponse:
      title: standardDeleteSuccessResponse
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
      example:
        type: urn:dx:rs:success
        title: Successful Operation
        results:
          - detail: 'File with id : 80f18fc8-ef83-47e2-a946-d88a3f39eeda/sample.txt deleted successfully'

